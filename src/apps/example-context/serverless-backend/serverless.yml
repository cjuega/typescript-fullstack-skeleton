service: ${env:SERVICE_NAME}

useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'offline'}
  region: ${env:AWS_REGION, 'eu-west-1'}
  profile: ${env:AWS_PROFILE, ''}
  logRetentionInDays: 5
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    NODE_ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  tracing:
    lambda: true
  iamManagedPolicies:
    - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"

plugins:
  - serverless-esbuild
  - serverless-iam-roles-per-function
  - serverless-prune-plugin
  - serverless-offline
  - serverless-offline-aws-eventbridge

custom:
  esbuild:
    packager: yarn
    plugins: esbuild-plugins.js
  serverless-iam-roles-per-function:
    defaultInherit: true # Each function will inherit the service level roles too.
  prune: # automatically prune old lambda versions
    automatic: true
    number: 3
  serverless-offline-aws-eventbridge:
    port: 4010
    debug: true
    account: ''
    convertEntry: false

package:
  individually: true

resources:
  - ${file(resources/eventbridge.yml)}
  - ${file(resources/dynamodb.yml)}

functions:
  # API
  - ${file(src/controllers/api/version/function.yml)}
  # example-aggregate
  - ${file(src/controllers/example-aggregate/create/function.yml)}
  # subscribers
  - ${file(src/subscribers/function.yml)}
